--
-- This SQL script builds a monopoly database, deleting any pre-existing version.
--
-- @author Bolu Olayemi
-- @version Summer, 2015
--

-- Drop previous versions of the tables if they they exist, in reverse order of foreign keys.
DROP TABLE IF EXISTS Game CASCADE;
DROP TABLE IF EXISTS PlayerGame CASCADE;
DROP TABLE IF EXISTS Player CASCADE;
DROP TABLE IF EXISTS CurrentState CASCADE;
DROP TABLE IF EXISTS HousingSituation CASCADE;

-- Create the schema.
CREATE TABLE Game (
	ID integer PRIMARY KEY, 
	time timestamp
	);

CREATE TABLE Player (
	ID integer PRIMARY KEY, 
	emailAddress varchar(50) NOT NULL,
	name varchar(50)
	);

CREATE TABLE PlayerGame (
	gameID integer REFERENCES Game(ID), 
	playerID integer REFERENCES Player(ID),
	score integer
	);
	
-- For ongoing games. Tells what game round they are on, who is playing, how much they available, player location and how much time left.
CREATE TABLE CurrentState (
	gameID integer REFERENCES Game(ID),
	playerID integer REFERENCES Player(ID),
	CurrentCash integer,
	CurrentSpot integer,
	Countdown timestamp
	-- CONSTRAINT CurrentSpot CHECK (CurrentSpot BETWEEN 1 AND 40)	
	);


-- Tells which game, who is playing, which space it is, number of houses and hotels on it.
CREATE TABLE HousingSituation (
	gameID integer REFERENCES Game(ID),
	playerID integer REFERENCES Player(ID),
	SpaceID integer,
	HouseCount integer,
	HotelCount integer
-- CONSTRAINT SpaceID CHECK (SpaceID BETWEEN 1 AND 40),	
-- CONSTRAINT HouseCount CHECK (HouseCount BETWEEN 0 AND 4 )	
	);
	
-- Allow users to select data from the tables.
GRANT SELECT ON Game TO PUBLIC;
GRANT SELECT ON Player TO PUBLIC;
GRANT SELECT ON PlayerGame TO PUBLIC;
GRANT SELECT ON CurrentState TO PUBLIC;
GRANT SELECT ON HousingSituation TO PUBLIC;

-- Add sample records.
INSERT INTO Game VALUES (1, '2006-06-27 08:00:00');
INSERT INTO Game VALUES (2, '2006-06-28 13:20:00');
INSERT INTO Game VALUES (3, '2006-06-29 18:41:00');

INSERT INTO Player(ID, emailAddress) VALUES (1, 'me@calvin.edu');
INSERT INTO Player VALUES (2, 'king@gmail.edu', 'The King');
INSERT INTO Player VALUES (3, 'dog@gmail.edu', 'Dogbreath');

INSERT INTO PlayerGame VALUES (1, 1, 0.00);
INSERT INTO PlayerGame VALUES (1, 2, 0.00);
INSERT INTO PlayerGame VALUES (1, 3, 2350.00);
INSERT INTO PlayerGame VALUES (2, 1, 1000.00);
INSERT INTO PlayerGame VALUES (2, 2, 0.00);
INSERT INTO PlayerGame VALUES (2, 3, 500.00);
INSERT INTO PlayerGame VALUES (3, 2, 0.00);
INSERT INTO PlayerGame VALUES (3, 3, 5500.00);

INSERT INTO CurrentState Values (3, 1, 100, 33, '2007-10-19 07:59:00');
INSERT INTO CurrentState Values (1, 3, 1239, 9, '2008-06-27 22:03:00');
INSERT INTO CurrentState Values (2, 2, -30, 27, '2009-04-04 13:33:00');

INSERT INTO HousingSituation Values (1, 1, 33, 0, 1);
INSERT INTO HousingSituation Values (1, 2, 27, 4, 0);
INSERT INTO HousingSituation Values (1, 3, 9, 1, 0);


-- Lab 8 (October 26th, 2018)
--Single-Table Queries in PostgreSQL
-- a.) Retrieve a list of all the games, ordered by date with the most recent game coming first.
SELECT *
FROM Game
ORDER BY time DESC;

-- b.) Retrieve all the games that occurred in the past week.
SELECT * 
FROM Game
WHERE time >= current_date - INTERVAL '7000 DAY';

-- c.) Retrieve a list of players who have (non-NULL) names.
SELECT *
FROM Player
WHERE name IS NOT NULL;

-- d.) Retrieve a list of IDs for players who have some game score larger than 2000.
SELECT *
FROM PlayerGame
WHERE score >=2000;

-- e.) Retrieve a list of players who have GMail accounts.
SELECT *
FROM Player
WHERE emailAddress LIKE '%gmail%';


--Multiple-Table Queries in PostgreSQL
--a.) Retrieve all “The King”’s game scores in decreasing order.
SELECT *
FROM Player
, PlayerGame
WHERE Player.ID = PlayerGame.playerID
	AND Player.name = 'The King'
	ORDER BY score DESC;

--b.) Retrieve the name of the winner of the game played on 2006-06-28 13:20:00.
SELECT Player.name
FROM Player, Game, PlayerGame
WHERE Player.ID = PlayerGame.playerID
	AND Game.ID = PlayerGame.gameID
	AND Game.time = '2006-06-28 13:20:00'
	ORDER BY score DESC
	LIMIT 1;
	
	SELECT P1.name
FROM Player AS P1, Player AS P2
WHERE P1.name = P2.name
  AND P1.ID < P2.ID;

--c.) So what does that P1.ID < P2.ID clause do in the last example query?
--Prevents same players from having the same ID.

--d.) The query that joined the Player table to itself seems rather contrived. Can you think of a realistic situation in which you’d want to join a table to itself?
-- In a situation like where we have lots of column information, there would be a need for a joined table to itself.